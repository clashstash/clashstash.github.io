<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashstash.github.io/news/article-92913.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>TS内置类型与拓展_在线工具</title>
        <meta name="description" content="TypeScript具有类型系统，且是JavaScript的超集，其可以编译成普通的JavaScript代码，也就是说，其是带有类型检查的JavaScript。 内置类型 TypeScript提供了几" />
        <link rel="icon" href="/assets/website/img/clashstash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashStash官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashstash.github.io/news/article-92913.htm" />
    <meta property="og:site_name" content="ClashStash官方节点站" />
    <meta property="og:title" content="TS内置类型与拓展_在线工具" />
    <meta property="og:image" content="https://clashstash.github.io/uploads/20240709/9a59164aa14fa2ff70e4ee3d5cf7db5d.webp" />
        <meta property="og:release_date" content="2025-04-10T08:19:45" />
    <meta property="og:updated_time" content="2025-04-10T08:19:45" />
        <meta property="og:description" content="TypeScript具有类型系统，且是JavaScript的超集，其可以编译成普通的JavaScript代码，也就是说，其是带有类型检查的JavaScript。 内置类型 TypeScript提供了几" />
        
    <link rel="stylesheet" href="/assets/website/css/clashstash/maicons.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/theme.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="TS内置类型与拓展_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FGG26WJLQX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FGG26WJLQX');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light bg-white sticky" data-offset="500">
            <div class="container">
                                <a href="/" class="navbar-brand">Clash<span class="text-primary">Stash</span></a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
            </div>
        </nav>
        <div class="container">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-6">
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                        <h1 class="text-center">TS内置类型与拓展_在线工具</h1>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <div class="page-section" id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p><code>TypeScript</code>具有类型系统，且是<code>JavaScript</code>的超集，其可以编译成普通的<code>JavaScript</code>代码，也就是说，其是带有类型检查的<code>JavaScript</code>。</p> <h2 id="内置类型">内置类型</h2> <p><code>TypeScript</code>提供了几种实用程序类型来促进常见的类型转换，这些类型在全局范围内可用。</p> <h3 id="partial">Partial</h3> <p><code>Partial&lt;Type&gt;</code>构造一个类型使<code>Type</code>的所有属性都设置为可选。</p> <pre><code>/**  * Make all properties in T optional  */  type Partial&lt;T&gt; = {     [P in keyof T]?: T[P]; }; </code></pre> <pre><code>interface Example {     a: string;     b: number; }  type PartialExample = Partial&lt;Example&gt;;  /**  * PartialExample  * interface {  *     a?: string | undefined;  *     b?: number | undefined;  * }  */ </code></pre> <h3 id="required">Required</h3> <p><code>Required&lt;Type&gt;</code>构造一个类型使<code>Type</code>的所有属性都设置为<code>required</code>，与<code>Partial&lt;Type&gt;</code>功能相反。</p> <pre><code>/**  * Make all properties in T required  */  type Required&lt;T&gt; = {     [P in keyof T]-?: T[P]; }; </code></pre> <pre><code>interface Example {     a?: string;     b?: number; }  type RequiredExample = Required&lt;Example&gt;;  /**  * RequiredExample  * interface {  *     a: string;  *     b: number;  * }  */ </code></pre> <h3 id="readonly">Readonly</h3> <p><code>Required&lt;Type&gt;</code>构造一个类型使<code>Type</code>的所有属性都设置为<code>readonly</code>，这意味着构造类型的属性都是只读的，不能被修改，这对使用<code>Object.freeze()</code>方法的对象非常有用。</p> <pre><code>/**  * Make all properties in T readonly  */  type Readonly&lt;T&gt; = {     readonly [P in keyof T]: T[P]; }; </code></pre> <pre><code>interface Example {     a: string;     b: number; }  type ReadonlyExample = Readonly&lt;Example&gt;;  /**  * ReadonlyExample  * interface {  *     readonly a: string;  *     readonly b: number;  * }  */ </code></pre> <h3 id="record">Record</h3> <p><code>Record&lt;Keys, Type&gt;</code>构造一个对象类型，其属性键为<code>Keys</code>，其属性值为<code>Type</code>，通常可以使用<code>Record</code>来表示一个对象。</p> <pre><code>/**  * Construct a type with a set of properties K of type T  */  type Record&lt;K extends keyof any, T&gt; = {     [P in K]: T; }; </code></pre> <pre><code>type RecordType = Record&lt;string, string|number&gt;;  const recordExample: RecordType ={   a: 1,   b: "1" } </code></pre> <h3 id="pick">Pick</h3> <p><code>Pick&lt;Type, Keys&gt;</code>通过从<code>Type</code>中选择一组属性<code>Keys</code>来构造一个类型。</p> <pre><code>/**  * From T, pick a set of properties whose keys are in the union K  */  type Pick&lt;T, K extends keyof T&gt; = {     [P in K]: T[P]; }; </code></pre> <pre><code>interface Example {     a: string;     b: number;     c: symbol; }  type PickExample = Pick&lt;Example, "a"|"b"&gt;;  /**  * PickExample  * interface {  *     a: string;  *     b: number;  * }  */ </code></pre> <h3 id="omit">Omit</h3> <p><code>Omit&lt;Type, Keys&gt;</code>通过从<code>Type</code>中选择所有属性然后删除<code>Keys</code>来构造一个类型，与<code>Pick&lt;Type, Keys&gt;</code>功能相反。</p> <pre><code>/**  * Construct a type with the properties of T except for those in type K.  */  type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;; </code></pre> <pre><code>interface Example {     a: string;     b: number;     c: symbol; }  type OmitExample = Omit&lt;Example, "a"|"b"&gt;;  /**  * OmitExample  * interface {  *     c: symbol;  * }  */ </code></pre> <h3 id="exclude">Exclude</h3> <p><code>Exclude&lt;UnionType, ExcludedMembers&gt;</code>通过从<code>UnionType</code>中排除可分配给<code>ExcludedMembers</code>的所有联合成员来构造类型。</p> <pre><code>/**  * Exclude from T those types that are assignable to U  */  type Exclude&lt;T, U&gt; = T extends U ? never : T; </code></pre> <pre><code>type ExcludeExample = Exclude&lt;"a"|"b"|"c"|"z", "a"|"b"|"d"&gt;;  /**  * ExcludeExample  * "c" | "z"  */ </code></pre> <h3 id="extract">Extract</h3> <p><code>Extract&lt;Type, Union&gt;</code>通过从<code>Type</code>中提取所有可分配给<code>Union</code>的联合成员来构造一个类型，与<code>Exclude&lt;UnionType, ExcludedMembers&gt;</code>功能相反。</p> <pre><code>/**  * Extract from T those types that are assignable to U  */  type Extract&lt;T, U&gt; = T extends U ? T : never; </code></pre> <pre><code>type ExtractExample = Extract&lt;"a"|"b"|"c"|"z", "a"|"b"|"d"&gt;;  /**  * ExtractExample  * "a" | "b"  */ </code></pre> <h3 id="nonnullable">NonNullable</h3> <p><code>NonNullable&lt;Type&gt;</code>通过从<code>Type</code>中排除<code>null</code>和<code>undefined</code>来构造一个类型。</p> <pre><code>/**  * Exclude null and undefined from T  */  type NonNullable&lt;T&gt; = T extends null | undefined ? never : T; </code></pre> <pre><code>type NonNullableExample = NonNullable&lt;number|string|null|undefined&gt;;  /**  * NonNullableExample  * string | number  */ </code></pre> <h3 id="parameters">Parameters</h3> <p><code>Parameters&lt;Type&gt;</code>从函数类型<code>Type</code>的参数中使用的类型构造元组类型。</p> <pre><code>/**  * Obtain the parameters of a function type in a tuple  */  type Parameters&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: infer P) =&gt; any ? P : never; </code></pre> <pre><code>type FnType = (a1: number, a2: string) =&gt; void;  type ParametersExample = Parameters&lt;FnType&gt;;  /**  * ParametersExample  * [a1: number, a2: string]  */ </code></pre> <h3 id="constructorparameters">ConstructorParameters</h3> <p><code>ConstructorParameters&lt;Type&gt;</code>从构造函数类型的类型构造元组或数组类型，其产生一个包含所有参数类型的元组类型。</p> <pre><code>/**  * Obtain the parameters of a constructor function type in a tuple  */  type ConstructorParameters&lt;T extends abstract new (...args: any) =&gt; any&gt; = T extends abstract new (...args: infer P) =&gt; any ? P : never; </code></pre> <pre><code>interface Example{   fn(a: string): string; }  interface ExampleConstructor{     new(a: string, b: number): Example; }  declare const Example: ExampleConstructor;  type ConstructorParametersExample = ConstructorParameters&lt;ExampleConstructor&gt;;  /**  * ConstructorParametersExample  * [a: string, b: number]  */ </code></pre> <h3 id="returntype">ReturnType</h3> <p><code>ReturnType&lt;Type&gt;</code>构造一个由函数<code>Type</code>的返回类型组成的类型。</p> <pre><code>/**  * Obtain the return type of a function type  */  type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : any; </code></pre> <pre><code>type FnType = (a1: number, a2: string) =&gt; string | number;  type ReturnTypeExample = ReturnType&lt;FnType&gt;;  /**  * ReturnTypeExample  * string | number  */ </code></pre> <h3 id="instancetype">InstanceType</h3> <p><code>InstanceType&lt;Type&gt;</code>构造一个由<code>Type</code>中构造函数的实例类型组成的类型。</p> <pre><code>/**  * Obtain the return type of a constructor function type  */  type InstanceType&lt;T extends abstract new (...args: any) =&gt; any&gt; = T extends abstract new (...args: any) =&gt; infer R ? R : any; </code></pre> <pre><code>interface Example{   fn(a: string): string; }  interface ExampleConstructor{     new(a: string, b: number): Example; }  declare const Example: ExampleConstructor;  type InstanceTypeExample = InstanceType&lt;ExampleConstructor&gt;;  // const a: InstanceTypeExample = new Example("a", 1); // new ExampleConstructor =&gt; Example  /**  * InstanceTypeExample  * Example  */ </code></pre> <h3 id="thisparametertype">ThisParameterType</h3> <p><code>ThisParameterType&lt;Type&gt;</code>提取函数类型的<code>this</code>参数的类型，如果函数类型没有<code>this</code>参数，则为<code>unknown</code>。</p> <pre><code>/**  * Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.  */  type ThisParameterType&lt;T&gt; = T extends (this: infer U, ...args: any[]) =&gt; any ? U : unknown; </code></pre> <pre><code>function toHex(this: Number) {   return this.toString(16); }  type ThisParameterTypeExample = ThisParameterType&lt;typeof toHex&gt;;  console.log(toHex.apply(27)); // 1b  /**  * ThisParameterTypeExample  * Number  */ </code></pre> <h3 id="omitthisparameter">OmitThisParameter</h3> <p><code>OmitThisParameter&lt;Type&gt;</code>从<code>Type</code>中移除<code>this</code>参数，如果<code>Type</code>没有显式声明此参数，则结果只是<code>Type</code>，否则，从<code>Type</code>创建一个不带此参数的新函数类型。泛型被删除，只有最后一个重载签名被传播到新的函数类型中。</p> <pre><code>/**  * Removes the 'this' parameter from a function type.  */  type OmitThisParameter&lt;T&gt; = unknown extends ThisParameterType&lt;T&gt; ? T : T extends (...args: infer A) =&gt; infer R ? (...args: A) =&gt; R : T; </code></pre> <pre><code>function toHex(this: Number) {   return this.toString(16); }  type OmitThisParameterExample = OmitThisParameter&lt;typeof toHex&gt;;  const toHex27: OmitThisParameterExample = toHex.bind(27); console.log(toHex27()); // 1b  /**  * OmitThisParameterExample  * () =&gt; string  */ </code></pre> <h3 id="thistype">ThisType</h3> <p><code>ThisType&lt;Type&gt;</code>可以在对象字面量中键入<code>this</code>，并提供通过上下文类型控制<code>this</code>类型的便捷方式，其只有在<code>--noImplicitThis</code>的选项下才有效。</p> <pre><code>/**  * Marker for contextual 'this' type  */ interface ThisType&lt;T&gt; { } </code></pre> <pre><code>// const foo1 = { //     bar() { //          console.log(this.a); // error //     } // }  const foo2: { bar: () =&gt; void } &amp; ThisType&lt;{ a: number }&gt; = {     bar() {          console.log(this.a); // ok     } } </code></pre> <h3 id="uppercase">Uppercase</h3> <p><code>Uppercase&lt;StringType&gt;</code>将<code>StringType</code>转为大写，<code>TS</code>以内置关键字<code>intrinsic</code>来通过编译期来实现。</p> <pre><code>/**  * Convert string literal type to uppercase  */  type Uppercase&lt;S extends string&gt; = intrinsic; </code></pre> <pre><code>type UppercaseExample = Uppercase&lt;"abc"&gt;;  /**  * UppercaseExample  * ABC  */ </code></pre> <h3 id="lowercase">Lowercase</h3> <p><code>Lowercase&lt;StringType&gt;</code>将<code>StringType</code>转为小写。</p> <pre><code>/**  * Convert string literal type to lowercase  */  type Lowercase&lt;S extends string&gt; = intrinsic; </code></pre> <pre><code>type LowercaseExample = Lowercase&lt;"ABC"&gt;;  /**  * LowercaseExample  * abc  */ </code></pre> <h3 id="capitalize">Capitalize</h3> <p><code>Capitalize&lt;StringType&gt;</code>将<code>StringType</code>首字母转为大写。</p> <pre><code>/**  * Convert first character of string literal type to uppercase  */  type Capitalize&lt;S extends string&gt; = intrinsic; </code></pre> <pre><code>type CapitalizeExample = Capitalize&lt;"abc"&gt;;  /**  * CapitalizeExample  * Abc  */ </code></pre> <h3 id="uncapitalize">Uncapitalize</h3> <p><code>Uncapitalize&lt;StringType&gt;</code>将<code>StringType</code>首字母转为小写。</p> <pre><code>/**  * Convert first character of string literal type to lowercase  */  type Uncapitalize&lt;S extends string&gt; = intrinsic; </code></pre> <pre><code>type UncapitalizeExample = Uncapitalize&lt;"ABC"&gt;;  /**  * CapitalizeExample  * aBC  */ </code></pre> <h2 id="拓展">拓展</h2> <p><code>TypeScript</code>中常用的一些语法以及概念。</p> <h3 id="泛型">泛型</h3> <p>泛型<code>Generics</code>是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。举一个简单的例子，如果需要实现一个生成数组的函数，这个数组会填充默认值，这个数组填充的类型不需要事先指定，而可以在使用的时候指定。当然在这里使用<code>new Array</code>组合<code>fill</code>函数是一个效果。</p> <pre><code>function createArray&lt;T&gt;(value: T, length: number): T[] {   const result: T[] = [];     for (let i = 0; i &lt; length; i++) {         result[i] = value;     }     return result; }  console.log(createArray&lt;number&gt;(1, 3)); // 不显式地指定`number`也可以自动推断 </code></pre> <p>我们也可以约束<code>T</code>的类型只能为<code>number</code>与<code>string</code>。</p> <pre><code>const createArray = &lt;T extends number|string&gt;(value: T, length: number): T[] =&gt; {   const result: T[] = [];     for (let i = 0; i &lt; length; i++) {         result[i] = value;     }     return result; }  console.log(createArray&lt;number&gt;(1, 3)); // console.log(createArray(true, 3)); // Argument of type 'boolean' is not assignable to parameter of type 'string | number'.(2345) </code></pre> <p>多个类型也可以相互约束，例如上边的<code>Pick</code>，在这里的<code>K</code>必须是<code>T</code>中<code>key</code>的子集。</p> <pre><code>type Pick&lt;T, K extends keyof T&gt; = {     [P in K]: T[P]; }; </code></pre> <p>在传递泛型的时候可以为<code>T</code>指定默认值，使用范型编写<code>class</code>即泛型类也是完全支持的。</p> <pre><code>class Example&lt;T = number&gt; {     public value: T;     public add: (x: T, y: T) =&gt; T;     constructor(value: T, add: (x: T, y: T) =&gt; T){       this.value = value;       this.add = add;     } }  let example = new Example&lt;number&gt;(1, (x, y) =&gt; x + y); console.log(example.value); // 1 console.log(example.add(1, 2)); // 3 </code></pre> <h3 id="断言">断言</h3> <p>类型断言<code>Type Assertion</code>可以用来手动指定一个值的类型，由于<code>&lt;Type&gt;value</code>的语法容易与<code>TSX</code>冲突，所以通常都是使用<code>value as Type</code>的语法。通常当<code>TypeScript</code>不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型中共有的属性或方法。</p> <pre><code>interface Cat {     name: string;     run(): void; } interface Fish {     name: string;     swim(): void; }  function getName(animal: Cat | Fish) {     return animal.name; } </code></pre> <p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法。</p> <pre><code>interface Cat {     name: string;     run(): void; } interface Fish {     name: string;     swim(): void; }  function isFish(animal: Cat | Fish) {     if (typeof animal.swim === "function") { // Property 'swim' does not exist on type 'Cat | Fish'. Property 'swim' does not exist on type 'Cat'.(2339)         return true;     }     return false; } </code></pre> <p>上面的例子中，获取<code>animal.swim</code>的时候会报错，此时可以使用类型断言，将<code>animal</code>断言成<code>Fish</code>。当然这里只是举一个例子说明断言的使用，因为滥用断言是不提倡的，类型断言只能够欺骗<code>TypeScript</code>编译器，而无法避免运行时的错误，滥用类型断言可能会导致运行时错误。</p> <pre><code>interface Cat {     name: string;     run(): void; } interface Fish {     name: string;     swim(): void; }  function isFish(animal: Cat | Fish) {     if (typeof (animal as Fish).swim === "function") {         return true;     }     return false; } </code></pre> <p>单个断言即<code>value as Type</code>是有一定条件的，当<code>S</code>类型是<code>T</code>类型的子集，或者<code>T</code>类型是<code>S</code>类型的子集时，<code>S</code>能被成功断言成<code>T</code>。这是为了在进行类型断言时提供额外的安全性，完全毫无根据的断言是危险的，如果你想这么做，你可以使用<code>any</code>。<br /> 如果认为某个值<code>value</code>必定是某种类型<code>Type</code>，而单个断言无法满足要求，可以使用双重断言，即<code>value as unknown as Type</code>，使用<code>value as any as Type</code>也是同样的效果，但是若使用双重断言，则可以打破要使得<code>A</code>能够被断言为<code>B</code>，只需要<code>A</code>兼容<code>B</code>或<code>B</code>兼容<code>A</code>即可的限制，将任何一个类型断言为任何另一个类型。通常来说除非迫不得已，不要使用双重断言。<br /> 此外类型断言之所以不被称为类型转换，是因为类型转换通常意味着某种运行时的支持，而类型断言只会影响<code>TypeScript</code>编译时的类型，类型断言语句在编译结果中会被删除，也就是说类型断言纯粹是一个编译时语法，同时其也是一种为编译器提供关于如何分析代码的方法。<br /> 与类型断言相关的还有一个<code>!</code>的表达式，其在<code>TypeScript 2.7</code>被加入，其称为<code>definite assignment assertion</code>显式赋值断言，显式赋值断言允许你在实例属性和变量声明之后加一个感叹号<code>!</code>，来告诉<code>TypeScript</code>这个变量确实已被赋值，即使<code>TypeScript</code>不能分析出这个结果。</p> <pre><code>let x: number; let y!: number; console.log(x + x); // Variable 'x' is used before being assigned.(2454) console.log(y + y); // ok </code></pre> <p>既然说到了<code>!</code>，那么也可以说一下<code>?</code>，在<code>interface</code>中<code>?</code>和<code>undefined</code>并不是等效的，在下面的例子中，在<code>b</code>未将<code>?</code>声明的情况下，其在<code>interface</code>下是<code>required</code>，<code>TypeScript</code>认为其是必须指定的<code>key</code>即使其值只能为<code>undefined</code>。</p> <pre><code>interface Example{   a?: number;   b: undefined; }  const example1: Example = {}; // Property 'b' is missing in type '{}' but required in type 'Example'.(2741) const example2: Example = { b: undefined }; // ok </code></pre> <h3 id="infer">infer</h3> <p><code>infer</code>示在<code>extends</code>条件语句中待推断的类型变量，也可以认为其是一个占位符，用以在使用时推断。例如上边的<code>ReturnType</code>就是通过<code>infer</code>进行推断的，首先是范型约束了一个函数类型，然后在后边进行<code>infer</code>占位后进行推断。</p> <pre><code>type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : any; </code></pre> <p>有一些应用，<code>tuple</code>转<code>union</code>，如<code>[string, number, symbol] -&gt; string | number | symbol</code>。</p> <pre><code>type ElementOf&lt;T&gt; = T extends Array&lt;infer E&gt; ? E : never;  type TTuple = [string, number, symbol];  type ToUnion = ElementOf&lt;TTuple&gt;; // string | number | symbol </code></pre> <p>还有一个比较离谱的实现。</p> <pre><code>type TTuple = [string, number, symbol]; type Res = TTuple[number]; // string | number | symbol  // https://stackoverflow.com/questions/44480644/string-union-to-string-array/45486495#45486495 </code></pre> <p>还比如获取函数参数的第一个参数类型。</p> <pre><code>type fn = (a: number, b: string, ddd: boolean) =&gt; void;  type FirstParameter&lt;T&gt; = T extends (args1: infer R, ...rest: any[]) =&gt; any ? R : never;  type firstArg = FirstParameter&lt;fn&gt;;  // number </code></pre> <h3 id="函数重载">函数重载</h3> <p><code>TypeScript</code>允许声明函数重载，即允许一个函数接受不同数量或类型的参数时，作出不同的处理。当然，最终声明即从函数内部看到的真正声明与所有重载兼容是很重要的。这是因为这是函数体需要考虑的函数调用的真实性质。</p> <pre><code>function reverse(x: number): number; function reverse(x: string): string; function reverse(x: number | string): number | string | void {     if (typeof x === "number") {         return Number(x.toString().split("").reverse().join(""));     } else if (typeof x === "string") {         return x.split("").reverse().join("");     } } </code></pre> <p>还有一个比较实用的简单例子，在<code>ios</code>上的<code>Date</code>对象是不接受形如<code>2022-04-05 20:00:00</code>的字符串去解析的，当在<code>safari</code>的控制台执行时，会出现一些异常行为。这个字符串的解析在谷歌浏览器或者安卓上就没有问题，所以需要做一下兼容处理。</p> <pre><code class="language-javascript">// safari const date = new Date("2022-04-05 20:00:00"); console.log(date.getDay()); // NaN  // chrome const date = new Date("2022-04-05 20:00:00"); console.log(date.getDay()); // 2 </code></pre> <p>所以需要对时间日期对象做一下简单的兼容，但是做兼容时又需要保证<code>TS</code>的声明，这时就可以使用函数重载等方式处理。</p> <pre><code>function safeDate(): Date; function safeDate(date: Date): Date; function safeDate(timestamp: number): Date; function safeDate(dateTimeStr: string): Date; function safeDate(     year: number,     month: number,     date?: number,     hours?: number,     minutes?: number,     seconds?: number,     ms?: number ): Date; function safeDate(     p1?: Date | number | string,     p2?: number,     p3?: number,     p4?: number,     p5?: number,     p6?: number,     p7?: number ): Date | never {     if (p1 === void 0) {         // 无参构建         return new Date();     } else if (p1 instanceof Date || (typeof p1 === "number" &amp;&amp; p2 === void 0)) {         // 第一个参数为`Date`或者`Number`且无第二个参数         return new Date(p1);     } else if (typeof p1 === "number" &amp;&amp; typeof p2 === "number") {         // 第一和第二个参数都为`Number`         return new Date(p1, p2, p3 || 1, p4 || 0, p5 || 0, p6 || 0, p7 || 0);     } else if (typeof p1 === "string") {         // 第一个参数为`String`         return new Date(p1.replace(/-/g, "/"));     }     throw new Error("No suitable parameters"); }  console.log(safeDate("2022-04-05 20:00:00").getDay()); // 2 </code></pre> <pre><code>type DateParams =     | []     | [string]     | [number, number?, number?, number?, number?, number?, number?]     | [Date]; const safeDate = &lt;T extends DateParams&gt;(...args: T): Date =&gt; {     const copyParams = args.slice(0);     if (typeof copyParams[0] === "string") copyParams[0] = copyParams[0].replace(/-/g, "/");     return new Date(...(args as ConstructorParameters&lt;typeof Date&gt;)); };  console.log(safeDate("2022-04-05 20:00:00").getDay()); // 2 </code></pre> <h3 id="声明文件">声明文件</h3> <p>对于全局变量的声明文件主要有以下几种语法：</p> <ul> <li> <code>declare var</code>声明全局变量。</li> <li> <code>declare function</code>声明全局方法。</li> <li> <code>declare class</code>声明全局类。</li> <li> <code>declare enum</code>声明全局枚举类型。</li> <li> <code>declare namespace</code>声明含有子属性的全局对象。</li> <li> <code>interface</code>和<code>type</code>声明全局类型。</li> <li> <code>declare module</code>拓展声明。</li> </ul> <p>我们可以通过<code>declare</code>关键字来告诉<code>TypeScript</code>，某些变量或者对象已经声明，我们可以选择把这些声明放入<code>.ts</code>或者<code>.d.ts</code>里。<code>declare namespace</code>表示全局变量是一个对象，包含很多子属性。</p> <pre><code>// global.d.ts declare namespace App {     interface Utils {         onload: &lt;T extends unknown[]&gt;(fn: (...args: T) =&gt; void, ...args: T) =&gt; void;     } }  declare interface Window{   utils: App.Utils }  // main.ts window.utils = {   onload: () =&gt; void 0 } </code></pre> <p>对于模块的声明文件主要有以下几种语法：</p> <ul> <li> <code>export</code>导出变量。</li> <li> <code>export namespace</code>导出含有子属性的对象。</li> <li> <code>export default ES6</code>默认导出。</li> <li> <code>export = </code>导出<code>CommonJs</code>模块。</li> </ul> <p>模块的声明文件与全局变量的声明文件有很大区别，在模块的声明文件中，使用<code>declare</code>不再会声明一个全局变量，而只会在当前文件中声明一个局部变量，只有在声明文件中使用<code>export</code>导出，然后在使用方<code>import</code>导入后，才会应用到这些类型声明，如果想使用模块的声明文件而并没有实际的<code>export</code>时，通常会显示标记一个空导出<code>export {}</code>。对于模块的声明文件我们更推荐使用 <code>ES6</code>标准的<code>export default</code>和<code>export</code>。</p> <pre><code>// xxx.ts export const name: string = "1";  // xxxxxx.ts import { name } from "xxx.ts"; console.log(name); // 1 // typeof name === "string" </code></pre> <p>如果是需要扩展原有模块的话，需要在类型声明文件中先引用原有模块，再使用<code>declare module</code>扩展原有模块。</p> <pre><code>// xxx.d.ts import * as moment from "moment";  declare module "moment" {     export function foo(): moment.CalendarKey; }  // xxx.ts import * as moment from "moment"; moment.foo(); </code></pre> <pre><code>import Vue from "vue";  declare module "vue/types/vue" {     interface Vue {         copy: (str: string) =&gt; void;     } } </code></pre> <p>还有一些诸如<code>.vue</code>文件、<code>.css</code>、<code>.scss</code>文件等，需要在全局中进行声明其<code>import</code>时对象的类型。</p> <pre><code>declare module "*.vue" {     import Vue from "vue/types/vue";     export default Vue; } </code></pre> <pre><code>declare module "*.module.css" {   const classes: { readonly [key: string]: string };   export default classes; } </code></pre> <pre><code>declare module "*.module.scss" {   const classes: { readonly [key: string]: string };   export default classes; } </code></pre> <p>在声明文件中，还可以通过三斜线指令即<code>///</code>来导入另一个声明文件，在全局变量的声明文件中，是不允许出现<code>import</code>、<code>export</code>关键字的，一旦出现了，那么他就会被视为一个模块或<code>UMD</code>库，就不再是全局变量的声明文件了，故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令了。</p> <pre><code>// types/jquery-plugin/index.d.ts /// &lt;reference types="jquery" /&gt; declare function foo(options: JQuery.AjaxSettings): string;  // src/index.ts foo({}); </code></pre> <h3 id="协变与逆变">协变与逆变</h3> <p>子类型在编程理论上是一个复杂的话题，而他的复杂之处来自于一对经常会被混淆的现象。简单来说，协变即类型收敛，逆变即类型发散。在这里由下面的例子引起关于这个问题的讨论，在这里我们定义了一个父类型以及一个子类型，而且我们验证了这个子类型在<code>TS</code>中是<code>OK</code>的。</p> <pre><code>type SuperType = (value: number|string) =&gt; number|string; // 父类型 type SubType = (value: number|string|boolean) =&gt; number; // 子类型 参数逆变 返回值协变  const subFn: SubType = (value: number|string|boolean) =&gt; 1; const superFn: SuperType = subFn; // ok </code></pre> <p>首先我们可以探讨一下子类型，明显<code>number</code>是<code>number|string</code>的子类型，那么下面这个例子是完全<code>OK</code>的，这同样也是一个协变的过程，由此看来在上边例子的<code>SubType</code>确实是<code>SuperType</code>的子类型。</p> <pre><code>type SuperType = number|string; // 父类型 type SubType = number; // 子类型  const subValue: SubType = 1; const superValue: SuperType = subValue; // ok </code></pre> <p>那么此时就回到最上边的例子，这个函数参数<code>value</code>的类型就很奇怪，明明是子类型，反而类型的种类更多了，这个其实就是所谓的逆变，其实这就是为了保证类型的收敛是安全的。此时我们的<code>subFn</code>实际代表的函数是<code>SuperType</code>类型的，当我们实际调用的时候，传递的参数由于是<code>SuperType</code>类型的即<code>number|string</code>，所以必定是<code>SubType</code>类型的子类即<code>number|string|boolean</code>，这样也就保证了函数参数的收敛安全，之后当函数执行完成进行返回值时，由于函数实际定义时的返回类型是<code>number</code>，那么在返回出去的时候也必定是<code>number|string</code>的子类，这样也就保证了函数返回值的收敛安全。我们可以通过这个图示去理解这个函数子类型的问题，类似于以下的调用过程，由此做到类型收敛的安全。</p> <pre><code>父类型参数 -&gt; 子类型参数 -&gt; 执行 -&gt; 子类型返回值 -&gt; 父类型返回值 number|string -&gt; number|string|boolean -&gt; ... -&gt; number -&gt; number|string </code></pre> <p>我们可以进行一个总结: 除了函数参数类型是逆变，都是协变。将一个函数赋给另一个函数变量时，要保证参数类型发散，即比目标类型范围小。目标函数执行时是执行的原函数，传入的参数类型会收敛为原函数参数类型。协变表示类型收敛，即类型范围缩小或不变，逆变反之。本质是为了保证执行时类型收敛是安全的。</p> <p>另外可以看一下 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://jkchao.github.io/typescript-book-chinese/tips/covarianceAndContravariance.html"  target="_blank"  rel="nofollow">这篇文章</a> 对于协变与逆变的描述。<br /> 开始文章之前我们先约定如下的标记，<code>A ≼ B</code>意味着<code>A</code>是<code>B</code>的子类型;<code>A → B</code>指的是以<code>A</code>为参数类型，以<code>B</code>为返回值类型的函数类型;<code>x : A</code>意味着<code>x</code>的类型为<code>A</code>。<br /> 假设我有如下三种类型：<code>Greyhound ≼ Dog ≼ Animal</code>。<br /><code>Greyhound</code>灰狗是<code>Dog</code>狗的子类型，而<code>Dog</code>则是<code>Animal</code>动物的子类型，由于子类型通常是可传递的，因此我们也称<code>Greyhound</code>是<code>Animal</code>的子类型，问题: 以下哪种类型是<code>Dog → Dog</code>的子类型呢。</p> <ol> <li> <code>Greyhound → Greyhound</code>。</li> <li> <code>Greyhound → Animal</code>。</li> <li> <code>Animal → Animal</code>。</li> <li> <code>Animal → Greyhound</code>。</li> </ol> <p>让我们来思考一下如何解答这个问题，首先我们假设<code>f</code>是一个以<code>Dog → Dog</code>为参数的函数，它的返回值并不重要，为了具体描述问题，我们假设函数结构体是这样的<code>f :(Dog → Dog ) → String</code>，现在我想给函数<code>f</code>传入某个函数<code>g</code>来调用，我们来瞧瞧当<code>g</code>为以上四种类型时，会发生什么情况。</p> <p>1.我们假设<code>g : Greyhound → Greyhound</code>，<code>f(g)</code>的类型是否安全？<br /> 不安全，因为在<code>f</code>内调用它的参数<code>(g)</code>函数时，使用的参数可能是一个不同于灰狗但又是狗的子类型，例如<code>GermanShepherd</code>牧羊犬。<br /> 2.我们假设<code>g : Greyhound → Animal</code>，<code>f(g)</code>的类型是否安全？<br /> 不安全。理由同<code>1</code>。<br /> 3.我们假设<code>g : Animal → Animal</code>，<code>f(g)</code>的类型是否安全？<br /> 不安全。因为<code>f</code>有可能在调用完参数之后，让返回值也就是<code>Animal</code>动物狗叫，并非所有动物都会狗叫。<br /> 4.我们假设<code>g : Animal → Greyhound</code>，<code>f(g)</code>的类型是否安全？<br /> 是的，它的类型是安全的，首先<code>f</code>可能会以任何狗的品种来作为参数调用，而所有的狗都是动物，其次，它可能会假设结果是一条狗，而所有的灰狗都是狗。</p> <p>如上所述，我们得出结论<code>(Animal → Greyhound) ≼ (Dog → Dog)</code>返回值类型很容易理解，灰狗是狗的子类型，但参数类型则是相反的，动物是狗的父类。用合适的术语来描述这个奇怪的表现，可以说我们允许一个函数类型中，返回值类型是协变的，而参数类型是逆变的。返回值类型是协变的，意思是<code>A ≼ B</code>就意味着<code>(T → A ) ≼ ( T → B )</code>，参数类型是逆变的，意思是<code>A ≼ B</code>就意味着<code>(B → T ) ≼ ( A → T )</code>即<code>A</code>和<code>B</code>的位置颠倒过来了。一个有趣的现象是在<code>TypeScript</code>中，参数类型是双向协变的，也就是说既是协变又是逆变的，而这并不安全，但是现在你可以在<code>TypeScript 2.6</code>版本中通过<code>--strictFunctionTypes</code>或<code>--strict</code>标记来修复这个问题。</p> <h3 id="tsconfigjson">tsconfig.json</h3> <pre><code>{   "compilerOptions": {     /* Basic Options */     "target": "es5" /* target用于指定编译之后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */,     "module": "commonjs" /* 用来指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,     "lib": ["es6", "dom"] /* lib用于指定要包含在编译中的库文件 */,     "allowJs": true,                       /* allowJs设置的值为true或false，用来指定是否允许编译js文件，默认是false，即不编译js文件 */     "checkJs": true,                       /* checkJs的值为true或false，用来指定是否检查和报告js文件中的错误，默认是false */     "jsx": "preserve",                     /* 指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'. */     "declaration": true,                   /* declaration的值为true或false，用来指定是否在编译的时候生成相应的".d.ts"声明文件。如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件。但是declaration和allowJs不能同时设为true */     "declarationMap": true,                /* 值为true或false，指定是否为声明文件.d.ts生成map文件 */     "sourceMap": true,                     /* sourceMap的值为true或false，用来指定编译时是否生成.map文件 */     "outFile": "./",                       /* outFile用于指定将输出文件合并为一个文件，它的值为一个文件路径名。比如设置为"./dist/main.js"，则输出的文件为一个main.js文件。但是要注意，只有设置module的值为amd和system模块时才支持这个配置 */     "outDir": "./",                        /* outDir用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹 */     "rootDir": "./",                       /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译 */     "composite": true,                     /* 是否编译构建引用项目  */     "incremental": true,                   /* 是否启用增量编译*/     "tsBuildInfoFile": "./",               /* 指定文件用来存储增量编译信息 */     "removeComments": true,                /* removeComments的值为true或false，用于指定是否将编译后的文件中的注释删掉，设为true的话即删掉注释，默认为false */     "noEmit": true,                        /* 不生成编译文件，这个一般比较少用 */     "importHelpers": true,                 /* importHelpers的值为true或false，指定是否引入tslib里的辅助工具函数，默认为false */     "downlevelIteration": true,            /* 当target为'ES5' or 'ES3'时，为'for-of', spread, and destructuring'中的迭代器提供完全支持 */     "isolatedModules": true,               /* isolatedModules的值为true或false，指定是否将每个文件作为单独的模块，默认为true，它不可以和declaration同时设定 */     "newLine": "lf",                       /* 指定换行符。可选`crlf`和`LF`两种 */      /* Strict Type-Checking Options */     "strict": true /* strict的值为true或false，用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false */,     "noImplicitAny": true,                 /* noImplicitAny的值为true或false，如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any，如果noImplicitAny的值为true的话。则没有明确的类型会报错。默认值为false */     "strictNullChecks": true,              /* strictNullChecks为true时，null和undefined值不能赋给非这两种类型的值，别的类型也不能赋给他们，除了any类型。还有个例外就是undefined可以赋值给void类型 */     "strictFunctionTypes": true,           /* strictFunctionTypes的值为true或false，用于指定是否使用函数参数双向协变检查 */     "strictBindCallApply": true,           /* 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */     "strictPropertyInitialization": true,  /* 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false */    "noImplicitThis": true,                /* 当this表达式的值为any类型的时候，生成一个错误 */     "alwaysStrict": true,                  /* alwaysStrict的值为true或false，指定始终以严格模式检查每个模块，并且在编译之后的js文件中加入"use strict"字符串，用来告诉浏览器该js为严格模式 */      /* Additional Checks */     "noUnusedLocals": true,                /* 用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用eslint可以在你书写代码的时候做提示，你可以配合使用。它的默认值为false */     "noUnusedParameters": true,            /* 用于检查是否有在函数体中没有使用的参数，这个也可以配合eslint来做检查，默认为false */     "noImplicitReturns": true,             /* 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false */     "noFallthroughCasesInSwitch": true,    /* 用于检查switch中是否有case没有使用break跳出switch，默认为false */      /* Module Resolution Options */     "moduleResolution": "node",            /* 用于选择模块解析策略，有'node'和'classic'两种类型' */     "baseUrl": "./",                       /* baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响 */     "paths": {},                           /* 用于设置模块名称到基于baseUrl的路径映射 */     "rootDirs": [],                        /* rootDirs可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径的内容都放到一个文件夹中 */     "typeRoots": [],                       /* typeRoots用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载 */     "types": [],                           /* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来 */     "allowSyntheticDefaultImports": true,  /* 用来指定允许从没有默认导出的模块中默认导入 */     "esModuleInterop": true /* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 */,     "preserveSymlinks": true,              /* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识 */      /* Source Map Options */     "sourceRoot": "",                      /* sourceRoot用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里 */     "mapRoot": "",                         /* mapRoot用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性 */     "inlineSourceMap": true,               /* 指定是否将map文件的内容和js文件编译在同一个js文件中，如果设为true，则map的内容会以//# sourceMappingURL=然后拼接base64字符串的形式插入在js文件底部 */     "inlineSources": true,                 /* 用于指定是否进一步将.ts文件的内容也包含到输入文件中 */      /* Experimental Options */     "experimentalDecorators": true /* 用于指定是否启用实验性的装饰器特性 */     "emitDecoratorMetadata": true,         /* 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库 */   }   "files": [], // files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件，如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用* ? **/ 等通配符   "include": [],  // include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件   "exclude": [],  // exclude表示要排除的、不编译的文件，它也可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符   "extends": "",   // extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件   "compileOnSave": true,  // compileOnSave的值是true或false，如果设为true，在我们编辑了项目中的文件保存的时候，编辑器会根据tsconfig.json中的配置重新生成文件，不过这个要编辑器支持   "references": [],  // 一个对象数组，指定要引用的项目 } </code></pre> <h2 id="每日一题">每日一题</h2> <pre><code>https://github.com/WindrunnerMax/EveryDay </code></pre> <h2 id="参考">参考</h2> <pre><code>https://www.typescriptlang.org/play/ https://zhuanlan.zhihu.com/p/443995763 https://zhuanlan.zhihu.com/p/353156044 https://segmentfault.com/q/1010000040197076 https://www.cnblogs.com/terrymin/p/13897214.html https://www.cnblogs.com/wangleicode/p/10937707.html https://blog.csdn.net/qq_43869822/article/details/121664818 https://tslang.baiqian.ltd/release-notes/typescript-2.7.html https://www.typescriptlang.org/docs/handbook/utility-types.html https://levelup.gitconnected.com/intrinsic-types-in-typescript-8b9f814410d https://jkchao.github.io/typescript-book-chinese/tips/covarianceAndContravariance.html https://github.com/xcatliu/typescript-tutorial/blob/master/basics/declaration-files.md </code></pre> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-92912.htm">Java数据结构-栈的实现</a></p>
                                        <p>下一个：<a href="/news/article-93682.htm">设置网页脚本动态顺序加载</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-10-free-subscribe-node.htm" title="「3月10日」最高速度20.4M/S，2025年Clash/V2ray/SSR/Shadowrocket每天更新免费节点订阅链接">「3月10日」最高速度20.4M/S，2025年Clash/V2ray/SSR/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-67941.htm" title="宠物粮食批发厂家价格表大全及图片（宠物粮食批发网站）">宠物粮食批发厂家价格表大全及图片（宠物粮食批发网站）</a></li>
                        <li class="py-2"><a href="/news/article-74514.htm" title="字符串或数字中应该包含多少位数字，以便MySQL可以将其指定为日期值？">字符串或数字中应该包含多少位数字，以便MySQL可以将其指定为日期值？</a></li>
                        <li class="py-2"><a href="/news/article-71842.htm" title="Docker基础实战：自定义CentOS镜像详解">Docker基础实战：自定义CentOS镜像详解</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-free-subscribe-node.htm" title="「3月5日」最高速度20.6M/S，2025年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接">「3月5日」最高速度20.6M/S，2025年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-85619.htm" title="合肥有领养狗狗的地方吗（合肥哪有狗狗可以领养）">合肥有领养狗狗的地方吗（合肥哪有狗狗可以领养）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-17-node-share-links.htm" title="「3月17日」最高速度19.5M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接">「3月17日」最高速度19.5M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-69867.htm" title="数据库的四大特性以及不同隔离级别">数据库的四大特性以及不同隔离级别</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-11-clash-stash.htm" title="「3月11日」最高速度19.7M/S，2025年Shadowrocket/V2ray/SSR/Clash每天更新免费节点订阅链接">「3月11日」最高速度19.7M/S，2025年Shadowrocket/V2ray/SSR/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-83481.htm" title="宠物粮供应商电话（宠物粮供应商电话是多少）">宠物粮供应商电话（宠物粮供应商电话是多少）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- .container -->
    </div> <!-- .page-section -->
        <footer class="page-footer bg-image" style="background-image: url(/assets/website/img/clashstash/world_pattern.svg);">
        <div class="container">
            <p class="text-center" id="copyright">
                                    <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                <a href="/">ClashStash官方节点站</a> 版权所有
                <br />Powered by WordPress
            </p>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/clashstash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashstash/bootstrap.bundle.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>