<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashstash.github.io/news/article-75864.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>python调用C代码方法与加速效果</title>
        <meta name="description" content="文章目录  1. 使用C扩展的方式简介 2. CTypes 3.SWIG 4.Python/C API   工具1：程序计时器   基于装饰器的运行时间计时器： 测试计时器        本文参考自 " />
        <link rel="icon" href="/assets/website/img/clashstash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashStash官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashstash.github.io/news/article-75864.htm" />
    <meta property="og:site_name" content="ClashStash官方节点站" />
    <meta property="og:title" content="python调用C代码方法与加速效果" />
    <meta property="og:image" content="https://clashstash.github.io/uploads/20240709/bf701bb32caac94df0a8b9b73516f6d1.webp" />
        <meta property="og:release_date" content="2025-03-17T09:41:37" />
    <meta property="og:updated_time" content="2025-03-17T09:41:37" />
        <meta property="og:description" content="文章目录  1. 使用C扩展的方式简介 2. CTypes 3.SWIG 4.Python/C API   工具1：程序计时器   基于装饰器的运行时间计时器： 测试计时器        本文参考自 " />
        
    <link rel="stylesheet" href="/assets/website/css/clashstash/maicons.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/theme.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="python调用C代码方法与加速效果">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FGG26WJLQX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FGG26WJLQX');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light bg-white sticky" data-offset="500">
            <div class="container">
                                <a href="/" class="navbar-brand">Clash<span class="text-primary">Stash</span></a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
            </div>
        </nav>
        <div class="container">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-6">
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                        <h1 class="text-center">python调用C代码方法与加速效果</h1>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <div class="page-section" id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#1_C_2" rel="nofollow">1. 使用C扩展的方式简介</a></li> <li><a href="#2_CTypes_11" rel="nofollow">2. CTypes</a></li> <li><a href="#3SWIG_55" rel="nofollow">3.SWIG</a></li> <li><a href="#4PythonC_API_130" rel="nofollow">4.Python/C API</a></li> <li> <ul> <li><a href="#1_271" rel="nofollow">工具1：程序计时器</a></li> <li> <ul> <li><a href="#_272" rel="nofollow">基于装饰器的运行时间计时器：</a></li> <li><a href="#_292" rel="nofollow">测试计时器</a></li> </ul> </li> </ul> </li> </ul> </div> <p> 本文参考自<br /> <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/navysummer/p/10648520.html"  rel="nofollow">1</a>,后续会继续补充深度学习python C API的开发方法与实例。</p> </h1> <p>CPython还为开发者实现了一个有趣的特性，使用Python可以轻松调用C代码</p> <p>开发者有三种方法可以在自己的Python代码中来调用C编写的函数-ctypes，SWIG，Python/C API。每种方式也都有各自的利弊。</p> <p>首先，我们要明确为什么要在Python中调用C？</p> <p>常见原因如下： - 你要提升代码的运行速度，而且你知道C要比Python快50倍以上 - C语言中有很多传统类库，而且有些正是你想要的，但你又不想用Python去重写它们 - 想对从内存到文件接口这样的底层资源进行访问</p> </h1> <p>Python中的ctypes模块可能是Python调用C方法中最简单的一种。ctypes模块提供了和C语言兼容的数据类型和函数来加载dll文件，因此在调用时不需对源文件做任何的修改。也正是如此奠定了这种方法的简单性。<br /> 示例如下：<br /> 实现两数求和的C代码，保存为add.c</p> <pre><code>touch add.c gedit add.c  </code></pre> <p>输入如下代码：</p> <pre><code>#include &lt;stdio.h&gt;   //sample C file to add 2 numbers - int and floats  int add_int(int, int); float add_float(float, float);  int add_int(int num1, int num2){ return num1 + num2;  }  float add_float(float num1, float num2){ return num1 + num2;  } </code></pre> <p>接下来将C文件编译为.so文件(windows下为DLL)。下面操作会生成adder.so文件</p> <pre><code>#For Linux $ gcc -shared -Wl,-soname,adder -o adder.so -fPIC add.c  #For Mac $ gcc -shared -Wl,-install_name,adder.so -o adder.so -fPIC add.c </code></pre> <p>输出如下</p> <p>Sum of 4 and 5 = 9<br /> Sum of 5.5 and 4.1 = 9.60000038147<br /> 在这个例子中，C文件是自解释的，它包含两个函数，分别实现了整形求和和浮点型求和。</p> <p>在Python文件中，一开始先导入ctypes模块，然后使用CDLL函数来加载我们创建的库文件。这样我们就可以通过变量adder来使用C类库中的函数了。当adder.add_int()被调用时，内部将发起一个对C函数add_int的调用。ctypes接口允许我们在调用C函数时使用原生Python中默认的字符串型和整型。</p> <p>而对于其他类似布尔型和浮点型这样的类型，必须要使用正确的ctype类型才可以。如向adder.add_float()函数传参时, 我们要先将Python中的十进制值转化为c_float类型，然后才能传送给C函数。这种方法虽然简单，清晰，但是却很受限。例如，并不能在C中对对象进行操作。</p> </h1> <p>SWIG是Simplified Wrapper and Interface Generator的缩写。是Python中调用C代码的另一种方法。在这个方法中，开发人员必须编写一个额外的接口文件来作为SWIG(终端工具)的入口。</p> <p>Python开发者一般不会采用这种方法，因为大多数情况它会带来不必要的复杂。而当你有一个C/C++代码库需要被多种语言调用时，这将是个非常不错的选择。</p> <p>示例如下(来自SWIG官网)</p> <p>example.c文件中的C代码包含了不同的变量和函数</p> <p>复制代码</p> <pre><code>#include &lt;time.h&gt; double My_variable = 3.0;  int fact(int n) { if (n &lt;= 1) return 1; else return n*fact(n-1);  }  int my_mod(int x, int y) { return (x%y);  }  char *get_time() { time_t ltime; time(&amp;ltime); return ctime(&amp;ltime); } </code></pre> <p>复制代码<br /> example.i文件内容：</p> <pre><code>%module example %{ /* Put headers and other declarations here */ extern double My_variable; extern int    fact(int); extern int    my_mod(int n, int m); %}   extern double My_variable; extern int    fact(int); extern int    my_mod(int n, int m); </code></pre> <p>编译它</p> <pre><code>unix % swig -python example.i unix % gcc -c -fpic example.c example_wrap.c -I /usr/include/python2.7 unix % ld -shared example.o example_wrap.o -o _example.so </code></pre> <p>最后，Python的输出</p> <pre><code>&gt;&gt;&gt; import example &gt;&gt;&gt; example.fact(5) 120 &gt;&gt;&gt; example.my_mod(7,3) 1 &gt;&gt;&gt; example.get_time() 'Sun Feb 11 23:01:07 1996' &gt;&gt;&gt; </code></pre> <p>我们可以看到，使用SWIG确实达到了同样的效果，虽然下了更多的工夫，但如果你的目标是多语言还是很值得的。</p> </h1> <p>Python/C API可能是被最广泛使用的方法。它不仅简单，而且可以在C代码中操作你的Python对象。</p> <p>这种方法需要以特定的方式来编写C代码以供Python去调用它。所有的Python对象都被表示为一种叫做PyObject的结构体，并且Python.h头文件中提供了各种操作它的函数。例如，如果PyObject表示为PyListType(列表类型)时，那么我们便可以使用PyList_Size()函数来获取该结构的长度，类似Python中的len(list)函数。大部分对Python原生对象的基础函数和操作在Python.h头文件中都能找到。</p> <p>示例</p> <p>编写一个C扩展，添加所有元素到一个Python列表(所有元素都是数字)</p> <p>来看一下我们要实现的效果，这里演示了用Python调用C扩展的代码</p> <pre><code>#Though it looks like an ordinary python import, the addList module is implemented in C import addList  l = [1,2,3,4,5] print "Sum of List - " + str(l) + " = " + str(addList.add(l)) </code></pre> <p>上面的代码和普通的Python文件并没有什么分别，导入并使用了另一个叫做addList的Python模块。唯一差别就是这个模块并不是用Python编写的，而是C。</p> <p>接下来我们看看如何用C编写addList模块，这可能看起来有点让人难以接受，但是一旦你了解了这之中的各种组成，你就可以一往无前了。</p> <pre><code>//Python.h has all the required function definitions to manipulate the Python objects #include &lt;Python.h&gt;  //This is the function that is called from your python code static PyObject* addList_add(PyObject* self, PyObject* args){  PyObject * listObj;  //The input arguments come as a tuple, we parse the args to get the various variables //In this case it's only one list variable, which will now be referenced by listObj if (! PyArg_ParseTuple( args, "O", &amp;listObj )) return NULL;  //length of the list long length = PyList_Size(listObj);  //iterate over all the elements int i, sum =0; for (i = 0; i &lt; length; i++) { //get an element out of the list - the element is also a python objects PyObject* temp = PyList_GetItem(listObj, i); //we know that object represents an integer - so convert it into C long long elem = PyInt_AsLong(temp); sum += elem; }  //value returned back to python code - another python object //build value here converts the C long to a python integer return Py_BuildValue("i", sum);  }  //This is the docstring that corresponds to our 'add' function. static char addList_docs[] = "add( ): add all elements of the list\n";  /* This table contains the relavent info mapping - &lt;function-name in python module&gt;, &lt;actual-function&gt;, &lt;type-of-args the function expects&gt;, &lt;docstring associated with the function&gt; */ static PyMethodDef addList_funcs[] = { {"add", (PyCFunction)addList_add, METH_VARARGS, addList_docs}, {NULL, NULL, 0, NULL}  };  /* addList is the module name, and this is the initialization block of the module. &lt;desired module name&gt;, &lt;the-info-table&gt;, &lt;module's-docstring&gt; */ PyMODINIT_FUNC initaddList(void){ Py_InitModule3("addList", addList_funcs, "Add all ze lists");  } </code></pre> <p>逐步解释 - Python.h头文件中包含了所有需要的类型(Python对象类型的表示)和函数定义(对Python对象的操作) - 接下来我们编写将要在Python调用的函数, 函数传统的命名方式由{模块名}_{函数名}组成，所以我们将其命名为addList_add</p> <ul> <li>然后填写想在模块内实现函数的相关信息表，每行一个函数，以空行作为结束 - 最后的模块初始化块签名为PyMODINIT_FUNC init{模块名}。</li> </ul> <p>函数addList_add接受的参数类型为PyObject类型结构(同时也表示为元组类型，因为Python中万物皆为对象，所以我们先用PyObject来定义)。传入的参数则通过PyArg_ParseTuple()来解析。第一个参数是被解析的参数变量。第二个参数是一个字符串，告诉我们如何去解析元组中每一个元素。字符串的第n个字母正是代表着元组中第n个参数的类型。例如，"i"代表整形，"s"代表字符串类型, "O"则代表一个Python对象。接下来的参数都是你想要通过PyArg_ParseTuple()函数解析并保存的元素。这样参数的数量和模块中函数期待得到的参数数量就可以保持一致，并保证了位置的完整性。例如，我们想传入一个字符串，一个整数和一个Python列表，可以这样去写</p> <pre><code>int n; char *s; PyObject* list; PyArg_ParseTuple(args, "siO", &amp;n, &amp;s, &amp;list); </code></pre> <p>在这种情况下，我们只需要提取一个列表对象，并将它存储在listObj变量中。然后用列表对象中的PyList_Size()函数来获取它的长度。就像Python中调用len(list)。</p> <p>现在我们通过循环列表，使用PyList_GetItem(list, index)函数来获取每个元素。这将返回一个PyObject*对象。既然Python对象也能表示PyIntType，我们只要使用PyInt_AsLong(PyObj *)函数便可获得我们所需要的值。我们对每个元素都这样处理，最后再得到它们的总和。</p> <p>总和将被转化为一个Python对象并通过Py_BuildValue()返回给Python代码，这里的i表示我们要返回一个Python整形对象。</p> <p>现在我们已经编写完C模块了。将下列代码保存为setup.py</p> <pre><code>#build the modules from distutils.core import setup, Extension  setup(name='addList', version='1.0', \ ext_modules=[Extension('addList', ['adder.c'])]) </code></pre> <p>并且运行</p> <pre><code>python setup.py install </code></pre> <p>现在应该已经将我们的C文件编译安装到我们的Python模块中了。</p> <p>在一番辛苦后，让我们来验证下我们的模块是否有效</p> <pre><code>#module that talks to the C code import addList  l = [1,2,3,4,5] print "Sum of List - " + str(l) + " = " + str(addList.add(l)) </code></pre> <p>输出结果如下</p> <pre><code>Sum of List - [1, 2, 3, 4, 5] = 15 </code></pre> <p>如你所见，我们已经使用Python.h API成功开发出了我们第一个Python C扩展。这种方法看似复杂，但你一旦习惯，它将变的非常有效。</p> <p>Python调用C代码的另一种方式便是使用Cython让Python编译的更快。但是Cython和传统的Python比起来可以将它理解为另一种语言，所以我们就不在这里过多描述了。</p> <h2> <a id="1_271" rel="nofollow"></a>工具1：程序计时器</h2> <h3> <a id="_272" rel="nofollow"></a>基于装饰器的运行时间计时器：</h3> <pre><code>import time from functools import wraps  def fn_timer(function):     @wraps(function)     def function_timer(*args, **kwargs):         t0 = time.time()         result = function(*args, **kwargs)         t1 = time.time()         print("Total time running %s: %s seconds" %               (function.__name__, str(t1 - t0))               )         return result      return function_timer </code></pre> <h3> <a id="_292" rel="nofollow"></a>测试计时器</h3> <p>测试代码：</p> <pre><code>import random @fn_timer def random_sort(n):   return sorted([random.random() for i in range(n)])   random_sort(11) </code></pre> <p>运行结果：</p> <pre><code>Total time running random_sort: 1.1682510375976562e-05 seconds Out[27]:  [0.012073244032724806,  0.07877429587802698,  0.17433726584559017,  0.2915961485137758,  0.30071954946940505,  0.39268327145132986,  0.595365137563172,  0.6150659289273317,  0.6313956456684537,  0.6931757747703199,  0.8189833849812935] </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-75863.htm">2.使用httpclient发起post请求</a></p>
                                        <p>下一个：<a href="/news/article-76540.htm">上海地区领养狗狗多少钱（上海地区领养狗狗多少钱一个月）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-73170.htm" title="猫咪打疫苗一共几针?多少钱一针啊（猫咪打疫苗打几针多少钱）">猫咪打疫苗一共几针?多少钱一针啊（猫咪打疫苗打几针多少钱）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-8-share-clash-stash.htm" title="「2月8日」最高速度22.7M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「2月8日」最高速度22.7M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-40184.htm" title="私下手写的协议书有效吗（私人手写协议有效吗）">私下手写的协议书有效吗（私人手写协议有效吗）</a></li>
                        <li class="py-2"><a href="/news/article-44144.htm" title="在我的城市里有一家宠物医院用英语怎么读（在我的城市里有一家宠物医院用英语怎么读写）">在我的城市里有一家宠物医院用英语怎么读（在我的城市里有一家宠物医院用英语怎么读写）</a></li>
                        <li class="py-2"><a href="/news/article-63580.htm" title="PHP魔术方法">PHP魔术方法</a></li>
                        <li class="py-2"><a href="/news/article-45644.htm" title="SpringBoot如何整合spring-retry来实现接口请求重试">SpringBoot如何整合spring-retry来实现接口请求重试</a></li>
                        <li class="py-2"><a href="/news/article-41171.htm" title="开宠物店预算多少钱（开宠物店大概需要多少投资）">开宠物店预算多少钱（开宠物店大概需要多少投资）</a></li>
                        <li class="py-2"><a href="/news/article-37237.htm" title="黑枸杞的作用与功效,多吃有哪些好处和坏处(黑枸杞的作用与功效,多吃有哪些好处呢)">黑枸杞的作用与功效,多吃有哪些好处和坏处(黑枸杞的作用与功效,多吃有哪些好处呢)</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-26-node-share-links.htm" title="「1月26日」最高速度21.6M/S，2025年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅链接">「1月26日」最高速度21.6M/S，2025年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-76540.htm" title="上海地区领养狗狗多少钱（上海地区领养狗狗多少钱一个月）">上海地区领养狗狗多少钱（上海地区领养狗狗多少钱一个月）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- .container -->
    </div> <!-- .page-section -->
        <footer class="page-footer bg-image" style="background-image: url(/assets/website/img/clashstash/world_pattern.svg);">
        <div class="container">
            <p class="text-center" id="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <a href="/">ClashStash官方节点站</a> 版权所有
                <br />Powered by WordPress
            </p>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/clashstash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashstash/bootstrap.bundle.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>