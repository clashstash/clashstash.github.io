<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashstash.github.io/news/article-93684.htm" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>反射的概念 和基本使用（一）</title>
        <meta name="description" content="什么是反射  java反射 是指在运行状态中 对于任意一个类 我们都可以知到这个类的所有方法和属性 也可以调用其所有的方法和属性  这种动态获取的方式 我们称为反射  什么是class对象   我们通" />
        <link rel="icon" href="/assets/website/img/clashstash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashStash官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashstash.github.io/news/article-93684.htm" />
    <meta property="og:site_name" content="ClashStash官方节点站" />
    <meta property="og:title" content="反射的概念 和基本使用（一）" />
    <meta property="og:image" content="https://clashstash.github.io/uploads/20240709/456a3076ba21907ac9ec2be1ec15f448.webp" />
        <meta property="og:release_date" content="2025-04-11T08:58:35" />
    <meta property="og:updated_time" content="2025-04-11T08:58:35" />
        <meta property="og:description" content="什么是反射  java反射 是指在运行状态中 对于任意一个类 我们都可以知到这个类的所有方法和属性 也可以调用其所有的方法和属性  这种动态获取的方式 我们称为反射  什么是class对象   我们通" />
        
    <link rel="stylesheet" href="/assets/website/css/clashstash/maicons.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashstash/theme.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="反射的概念 和基本使用（一）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FGG26WJLQX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FGG26WJLQX');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Back to top button -->
    <div class="back-to-top"></div>
    <header>
                <nav class="navbar navbar-expand-lg navbar-light bg-white sticky" data-offset="500">
            <div class="container">
                                <a href="/" class="navbar-brand">Clash<span class="text-primary">Stash</span></a>
                                <button class="navbar-toggler" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse" id="navbarContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
            </div>
        </nav>
        <div class="container">
            <div class="page-banner">
                <div class="row justify-content-center align-items-center h-100">
                    <div class="col-md-6">
                        <nav aria-label="Breadcrumb">
                            <ul class="breadcrumb justify-content-center py-0 bg-transparent">
                                <li class="breadcrumb-item"><a href="/">首页</a></li>
                                <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                                <li class="breadcrumb-item active">正文</li>
                            </ul>
                        </nav>
                        <h1 class="text-center">反射的概念 和基本使用（一）</h1>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <div class="page-section" id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <h3 id="什么是反射">什么是反射</h3> <blockquote> <p>java反射 是指在运行状态中 对于任意一个类 我们都可以知到这个类的所有方法和属性 也可以调用其所有的方法和属性  这种动态获取的方式 我们称为<strong>反射</strong></p> </blockquote> <h3 id="什么是class对象">什么是class对象</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7979522ca41f14c021cfeea795249129.jpg" alt="反射的概念 和基本使用（一）"></p> <blockquote> <p>我们通过使用<code>反射</code> 就是通过Class类来实现的<code>Class</code> 类的实例表示正在运行的 Java 应用程序中的类和接口。</p> <p>也就是jvm中有N多的实例每个类都有该Class对象。（包括基本数据类型）</p> </blockquote> <h3 id="反射的使用">反射的使用</h3> <h4 id="获取class对象的三种方式">获取class对象的三种方式</h4> <h5 id="基本类"><strong>基本类</strong></h5> <pre><code class="language-java">/**  *  * @author : look-word  * @date : 2022-04-05 20:49  **/ public class Student {     private String username;     private String gender;      public  String getInfo() {         this.setUsername("张三");         this.setGender("男");         return this.username+"="+this.gender;     }      public String getUsername() {         return username;     }      public void setUsername(String username) {         this.username = username;     }      public String getGender() {         return gender;     }      public void setGender(String gender) {         this.gender = gender;     } }</code></pre> <h5 id="测试代码如下"><strong>测试代码如下</strong></h5> <pre><code class="language-java">/**  * @author : look-word  * @date : 2022-04-05 20:54  **/ public class Test {     public static void main(String[] args) {          /*             1 创建对象 获取其class对象          */         Student student = new Student();         Class&lt;? extends Student&gt; aClass = student.getClass();         System.out.println(aClass.getSimpleName());         /*             2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性          */         Class&lt;? extends Student&gt; bClass=Student.class;         System.out.println(aClass == bClass?"两者是同一对象":"两者不是同一对象");         /*             3 通过Class类的forName方法获取          */         try {             //  Class.forName(类的相对路径)             Class&lt;?&gt; cClass = Class.forName("bean.Student");             System.out.println(bClass == cClass?"两者是同一对象":"两者不是同一对象");         } catch (ClassNotFoundException e) {             e.printStackTrace();         }     } }</code></pre> <h5 id="结果如下"><strong>结果如下</strong></h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c864112bfaabe40687973992ac013ecc.jpg" alt="反射的概念 和基本使用（一）"></p> <h5 id="证明">证明</h5> <blockquote> <p>在运行期间 一个类只有一个class对象的产生</p> <p>常用的是<code>第三次</code> 清晰 明了 因为 在一个项目中 可能会产生 相同名字的类</p> <p>解决疑惑  为什么要是用 第三种</p> <p>第一种对象都有了还要反射干什么。</p> <p>第二种需要导入类的包，依赖太强，不导包就抛编译错误。</p> <p><code>第三种</code>，一个字符串可以传入也可写在配置文件中等多种方法。</p> </blockquote> <h4 id="获取class类中的所有构造方法">获取Class类中的所有构造方法</h4> <h5 id="基本类-1">基本类</h5> <pre><code class="language-java">public class Student {     //---------------构造方法-------------------     //（默认的构造方法）     Student(String str){         System.out.println("(默认)的构造方法 s = " + str);     }      //无参构造方法     public Student(){         System.out.println("调用了公有、无参构造方法执行了。。。");     }      //有一个参数的构造方法     public Student(char name){         System.out.println("姓名：" + name);     }      //有多个参数的构造方法     public Student(String name ,int age){         System.out.println("姓名："+name+" 年龄："+ age);//这的执行效率有问题，以后解决。     }      //受保护的构造方法     protected Student(boolean n){         System.out.println("受保护的构造方法 n = " + n);     }      //私有构造方法     private Student(int age){         System.out.println("私有的构造方法   年龄："+ age);     } }</code></pre> <h5 id="测试代码">测试代码</h5> <pre><code class="language-java">/**  * 测试构造方法  * @author : look-word  * @date : 2022-04-05 21:18  **/ public class TestConstructor {  /**  * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员；  *  * 1.获取构造方法：  * 		1).批量的方法：  * 			public Constructor[] getConstructors()：所有"公有的"构造方法             public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)   * 		2).获取单个的方法，并调用：  * 			public Constructor getConstructor(Class... parameterTypes):获取单个的"公有的"构造方法：  * 			public Constructor getDeclaredConstructor(Class... parameterTypes):获取"某个构造方法"可以是私有的，或受保护、默认、公有；  *  * 			调用构造方法：  * 			Constructor--&gt;newInstance(Object... initargs) */     public static void main(String[] args) throws Exception {         Class&lt;?&gt; student = Class.forName("bean.Student");         /*             1 获取所有共有的构造方法          */         System.out.println("\n1 获取所有共有的构造方法");         Constructor&lt;?&gt;[] constructors = student.getConstructors();         for (Constructor&lt;?&gt; constructor : constructors) {             System.out.println(constructor);         }          /*             2 获取共有的无参构造方法 可以写 null 或者 不填          */         System.out.println("\n2 获取共有的无参构造方法 可以写 null 或者 不填");         Constructor&lt;?&gt; constructor2 = student.getConstructor();         constructor2.newInstance();          /*             3 获取 给定参数共有的构造方法 public bean.Student(java.lang.String,int)          */         System.out.println("\n 3 获取 给定参数共有的构造方法 public bean.Student(java.lang.String,int)");         Constructor&lt;?&gt; constructor3 = student.getConstructor(String.class, int.class);         constructor3.newInstance("张三",19);          /*             4 获取 私有给定参数的构造方法 私有 不给定参数 不传参数即可          */         Constructor&lt;?&gt; constructor4 = student.getDeclaredConstructor(int.class);         /*             获取私有的属性 或者构造方法是 需要 设置无障碍 俗称 暴力访问             不设置 会出异常 java.lang.IllegalAccessException          */         constructor4.setAccessible(true);         constructor4.newInstance(19);     } }</code></pre> <h5 id="执行结果">执行结果</h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d6dcd384df6988ff11a3d3ea1648149d.jpg" alt="反射的概念 和基本使用（一）"></p> <h5 id="注意">注意</h5> <blockquote> <p>获取私有属性的时候 一定要设置无障碍</p> <p>setAccessible(true);</p> <p>不设置 会出异常 java.lang.IllegalAccessException</p> <p>newInstance(Object... initargs)  创建一个新实例<br /> 使用此<code>Constructor</code> 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。</p> <p>每次是用<code>newInstance</code>创建的对象 都是不同的对象 代表不同的实例</p> </blockquote> <h4 id="操作成员变量">操作成员变量</h4> <h5 id="基本类-2">基本类</h5> <pre><code class="language-java">  public class Student { 	public Student(){ 		 	} 	//**********字段*************// 	public String name; 	protected int age; 	char sex; 	private String phoneNum; 	 	@Override 	public String toString() { 		return "Student [name=" + name + ", age=" + age + ", sex=" + sex 				+ ", phoneNum=" + phoneNum + "]"; 	} }</code></pre> <h5 id="测试代码-1">测试代码</h5> <pre><code class="language-java">/**  * @author : look-word  * @date : 2022-04-05 21:55  **/ public class TestField {  /*  * 获取成员变量并调用：  *  * 1.批量的  * 		1).Field[] getFields():获取所有的"公有字段"  * 		2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；  * 2.获取单个的：  * 		1).public Field getField(String fieldName):获取某个"公有的"字段；  * 		2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)  *  * 	 设置字段的值：  * 		Field --&gt; public void set(Object obj,Object value):  * 					参数说明：  * 					1.obj:要设置的字段所在的对象；  * 					2.value:要为字段设置的值； */     public static void main(String[] args) throws Exception{         Class&lt;?&gt; aClass = Class.forName("bean.Student");         Student student = new Student();          /*             获取所有的共有字段          */         System.out.println("-------------------获取所有的共有字段--------------------");         Field[] fields = aClass.getFields();         for (Field field : fields) {             /*                 filed =&gt; public java.lang.String bean.Student.username                 filed =&gt; 成员变量              */              /*                我理解为 给某个对象的 成员变量 赋值                当前的filed 为 username 因为这里只能获取为 共有属性的成员变量              * field.set(student,"zhangsan");              */             field.set(student,"zhangsan");             System.out.println(student);             /*                 field.get(student);                 获取某student中的 field 的 内容              */             Object o = field.get(student);             System.out.println(o);             /*              *  打印filed的内容 =&gt; public java.lang.String bean.Student.username              */             System.out.println(field);         }          System.out.println("-------------------给私有字段赋值--------------------");         Field phone = aClass.getDeclaredField("phone");         phone.setAccessible(true);// 设置无障碍          phone.set(student,"110");// 赋值给student对象          System.out.println("-------------------获取私有字段--------------------");         Field phone1 = aClass.getDeclaredField("phone");         phone1.setAccessible(true);// 设置无障碍         System.out.println(phone1.get(student));//取出student对象中的phone属性的值     } }</code></pre> <h5 id="注意-1">注意</h5> <blockquote> <p>在操作私有属性的时候 不管是获取还是设置值 都需要设置无障碍</p> <p>setAccessible(true);// 设置无障碍</p> </blockquote> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-93682.htm">设置网页脚本动态顺序加载</a></p>
                                        <p>下一个：<a href="/news/article-94058.htm">厦门哪里有小狗领养（厦门哪里有收养狗狗的收容中心）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-90697.htm" title="动物疫苗在哪里买的 动物疫苗在哪里买的到">动物疫苗在哪里买的 动物疫苗在哪里买的到</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-7-free-ssr-node.htm" title="「4月7日」最高速度19.7M/S，2025年Clash/SSR/Shadowrocket/V2ray每天更新免费节点订阅链接">「4月7日」最高速度19.7M/S，2025年Clash/SSR/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-18-node-share-links.htm" title="「3月18日」最高速度21.5M/S，2025年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅链接">「3月18日」最高速度21.5M/S，2025年Clash/SSR/V2ray/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-28-node-share-links.htm" title="「3月28日」最高速度19.8M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接">「3月28日」最高速度19.8M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-75863.htm" title="2.使用httpclient发起post请求">2.使用httpclient发起post请求</a></li>
                        <li class="py-2"><a href="/news/article-73833.htm" title="佳雯宠物医院收费高吗知乎文章（佳雯宠物医院环城西路）">佳雯宠物医院收费高吗知乎文章（佳雯宠物医院环城西路）</a></li>
                        <li class="py-2"><a href="/news/article-66020.htm" title="元旦送什么礼物给女朋友好呢(10-15岁女孩礼物推荐)">元旦送什么礼物给女朋友好呢(10-15岁女孩礼物推荐)</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-22-clash-stash-node.htm" title="「3月22日」最高速度18.6M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接">「3月22日」最高速度18.6M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-81365.htm" title="大连领养宠物的地方（大连市领养宠物）">大连领养宠物的地方（大连市领养宠物）</a></li>
                        <li class="py-2"><a href="/news/article-89957.htm" title="动物医院设备设施清单（大型动物医院设备采购）">动物医院设备设施清单（大型动物医院设备采购）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- .container -->
    </div> <!-- .page-section -->
        <footer class="page-footer bg-image" style="background-image: url(/assets/website/img/clashstash/world_pattern.svg);">
        <div class="container">
            <p class="text-center" id="copyright">
                                    <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                <a href="/">ClashStash官方节点站</a> 版权所有
                <br />Powered by WordPress
            </p>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/clashstash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashstash/bootstrap.bundle.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>